{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/Users/ryansummerlin/App-Academy-Projects/react-thunk-add-tweet/frontend/src/TweetList.js\";\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllTweets } from './store/tweet';\nvar TweetList = function TweetList() {\n  var dispatch = useDispatch();\n  var tweetList = useSelector(function (state) {\n    return Object.values(state.tweet);\n  });\n  console.log(tweetList);\n  useEffect(function () {\n    dispatch(getAllTweets());\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Tweet List\"), tweetList.map(function (_ref) {\n    var id = _ref.id,\n      message = _ref.message;\n    return /*#__PURE__*/React.createElement(\"p\", {\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, message);\n  }));\n};\nexport default TweetList;","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","getAllTweets","TweetList","dispatch","tweetList","state","Object","values","tweet","console","log","createElement","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","_ref","id","message","key"],"sources":["/Users/ryansummerlin/App-Academy-Projects/react-thunk-add-tweet/frontend/src/TweetList.js"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllTweets } from './store/tweet';\n\nconst TweetList = () => {\n  const dispatch = useDispatch();\n  const tweetList = useSelector((state) => Object.values(state.tweet));\n  console.log(tweetList);\n\n  useEffect(() => {\n    dispatch(getAllTweets());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Tweet List</h1>\n      {tweetList.map(({ id, message }) => (\n        <p key={id}>{message}</p>\n      ))}\n    </div>\n  );\n};\n\nexport default TweetList;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,YAAY,QAAQ,eAAe;AAE5C,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;EACtB,IAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAC9B,IAAMK,SAAS,GAAGJ,WAAW,CAAC,UAACK,KAAK;IAAA,OAAKC,MAAM,CAACC,MAAM,CAACF,KAAK,CAACG,KAAK,CAAC;EAAA,EAAC;EACpEC,OAAO,CAACC,GAAG,CAACN,SAAS,CAAC;EAEtBN,SAAS,CAAC,YAAM;IACdK,QAAQ,CAACF,YAAY,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACE,QAAQ,CAAC,CAAC;EAEd,oBACEN,KAAA,CAAAc,aAAA;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACErB,KAAA,CAAAc,aAAA;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,YAAc,CAAC,EAClBd,SAAS,CAACe,GAAG,CAAC,UAAAC,IAAA;IAAA,IAAGC,EAAE,GAAAD,IAAA,CAAFC,EAAE;MAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IAAA,oBAC3BzB,KAAA,CAAAc,aAAA;MAAGY,GAAG,EAAEF,EAAG;MAAAT,MAAA,EAAAC,KAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEI,OAAW,CAAC;EAAA,CAC1B,CACE,CAAC;AAEV,CAAC;AAED,eAAepB,SAAS"},"metadata":{},"sourceType":"module"}